---
title: "Getting started with `ggplot2`"
author: "Leonard Blaschek"
format:
  revealjs: 
    slide-number: true
    preview-links: auto
    logo: images/KU.png
    theme: theme/sun.scss
    css: theme/styles.css
    fig-width: 5
    fig-height: 4
    embed-resources: true
    resources:
      - fonts/MrsEavesOT-Roman.woff2
      - fonts/MrsEavesOT-Italic.woff2
      - fonts/MrsEavesOT-Bold.woff2
      - fonts/FuturaStd-MediumOblique.woff2
      - fonts/FuturaStd-Medium.woff2
      - fonts/FuturaStd-BoldOblique.woff2
      - fonts/FuturaStd-Bold.woff2
      - fonts/IosevkaTerm-BoldItalic.woff2
      - fonts/IosevkaTerm-Bold.woff2
      - fonts/IosevkaTerm-Italic.woff2
      - fonts/IosevkaTerm-Regular.woff2
---

```{r}
theme_sulis <- function(base_size = 8) {
  theme_minimal(
    base_size = base_size
  ) %+replace%
    theme(
      axis.ticks = element_blank(),
      axis.text.x = element_text(
        size = base_size,
        colour = "black",
        margin = margin(1, 1, 1, 1)
      ),
      axis.text.y = element_text(
        colour = "black",
        size = base_size,
        angle = 0,
        vjust = 0.5,
        hjust = 1,
        margin = margin(1, 1, 1, 1)
      ),
      axis.title = element_text(
        colour = "black",
        size = base_size
      ),
      axis.line = element_line(),
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      legend.text = element_text(size = base_size),
      legend.key.height = unit(4, "mm"),
      complete = TRUE
    )
}
```


# A quick word about myself

## Traditional plotting interfaces

![](images/trad_1.png){.absolute top=150 left=0 height="500"}

## Traditional plotting interfaces

![](images/trad_2.png){.absolute top=150 left=0 height="500"}

# The 'Grammar of Graphics'

::: fragment
A universal framework that allows creating and combining without limits.
:::

::: fragment
[Almost.]{.highlight}
:::

## The 'Grammar of Graphics' {auto-animate=true}

![](images/theme.png){.absolute top=250 left=2 height="200"}
![](images/scales.png){.absolute top=250 left=0 height="200"}
![](images/coords.png){.absolute top=250 left=0 height="200"}
![](images/geom.png){.absolute top=250 left=0 height="200"}


## The 'Grammar of Graphics' {auto-animate=true}

![](images/theme.png){.absolute top=550 left=2 height="150"}
![](images/scales.png){.absolute top=400 left=0 height="150"}
![](images/coords.png){.absolute top=100 left=0 height="150"}
![](images/geom.png){.absolute top=250 left=0 height="150"}

[Coordinates]{.absolute top=200 left=200}
[Geometries]{.absolute top=350 left=200}
[Scales]{.absolute top=500 left=200}
[Theme]{.absolute top=650 left=200}

:::{.fragment style="color: grey"}
[Data]{.absolute top=125 left=200}
[Mapping]{.absolute top=275 left=200}
[Statistics]{.absolute top=425 left=200}
[Facets]{.absolute top=575 left=200}
:::

::: fragment
![](images/flow.png){.absolute top=200 left=600 height="400"}
:::



## Scope of this workshop 

<br>

1.   Load your data into R
2.   Make a handful of publishable plots
3.   Combine them into a multi-panel figure
4.   Save a .pdf in the right size (one/two column)

## What we're not doing today

<br>

-  Data wrangling (`dplyr`/`tidyr`)
-  Statistical tests 
-  90% of `ggplot2` 

# {background-image="images/wts.png" background-size="contain"}

---

**Multiplex CRISPR editing of wood for sustainable fiber production.**
Sulis DB, [...], Barrangou R, Wang JP. 2023. *Science* 381:216–221. [10.1126/science.add4514](https://doi.org/10.1126/science.add4514)

<br>

![Three panels from main figure 3.](images/Sulis_fig3.png)

# R fundamentals

```{.r}
ggplot()            # function
ggplot              # object
996107              # number
"ggplot"            # string
?ggplot()           # show help page 
library(tidyverse)  # use library() to load the tidyverse package
```

# R fundamentals {auto-animate=true}

```{.r}
?read_tsv()
```

:::{.fragment}
![](images/read_tsv_help.png)
:::

# R fundamentals {auto-animate=true}

```{.r}
?readr # navigate to package index and then vignettes
```

:::{.fragment}
![](images/readr_vignette.png)
:::


# 1. Data import {auto-animate=true}

```{.r}
library(tidyverse)
```

# 1. Data import {auto-animate=true}

```{.r}
library(tidyverse)
sulis_bar_data
```

# 1. Data import {auto-animate=true}

```{.r}
library(tidyverse)
sulis_bar_data <- read_tsv()
```

# 1. Data import {auto-animate=true}

::::{.columns}
:::{.column}
```{.r}
?read_tsv()
```

![](images/read_tsv_help2.png)
:::

:::{.column}
<br>
<br>
[Arguments without default need to be supplied]{.fragment}
:::

::::

# 1. Data import {auto-animate=true}

```{r}
#| echo: true
library(tidyverse)
sulis_bar_data <- read_tsv(file = "data/Sulis2023_fig3EF.tsv")
```

:::{.fragment}
Assign the function output of `read_tsv()` <br>to the object `sulis_bar_data`.
:::

# 1. Data import {auto-animate=true}

```{r}
#| echo: true
library(tidyverse)
sulis_bar_data <- read_tsv("data/Sulis2023_fig3EF.tsv")
sulis_bar_data
```


# 2. Building a plot {auto-animate=true}

::::{.columns}

:::{.column width="15%"}
:::{style="font-size: 0.5em"}
[Data]{style="color:grey"}

[Coordinates]{style="color:grey"}

[Mapping]{style="color:grey"}

[Geometries]{style="color:grey"}

[Statistics]{style="color:grey"}

[Scales]{style="color:grey"}

[Facets]{style="color:grey"}

[Theme]{style="color:grey"}
:::
:::

:::{.column width="45%"}
```{.r}
bar_plot <- ggplot()
```
:::

:::{.colum width="40%"}
:::
::::

# 2. Building a plot {auto-animate=true}

::::{.columns}

:::{.column width="15%"}
:::{style="font-size: 0.5em"}
[Data]{.highlight}

[Coordinates]{style="color:grey"}

[Mapping]{style="color:grey"}

[Geometries]{style="color:grey"}

[Statistics]{style="color:grey"}

[Scales]{style="color:grey"}

[Facets]{style="color:grey"}

[Theme]{style="color:grey"}
:::
:::

:::{.column width="42.5%"}
```{.r code-line-numbers="2"}
panel_E <- ggplot(
  data = sulis_bar_data
)
```
:::

:::{.colum width="42.5%"}
:::
::::

# 2. Building a plot {auto-animate=true}

::::{.columns}

:::{.column width="15%"}
:::{style="font-size: 0.5em"}
[Data]{.highlight}

[Coordinates]{style="color:grey"}

[Mapping]{.highlight}

[Geometries]{style="color:grey"}

[Statistics]{style="color:grey"}

[Scales]{style="color:grey"}

[Facets]{style="color:grey"}

[Theme]{style="color:grey"}
:::
:::

:::{.column width="42.5%"}
```{.r code-line-numbers="3-6"}
panel_E <- ggplot(
  data = sulis_bar_data,
  aes(
    x = line,
    y = lignin
  )
)
```
:::

:::{.colum width="42.5%"}
:::
::::

# 2. Building a plot {auto-animate=true}

::::{.columns}

:::{.column width="15%"}
:::{style="font-size: 0.5em"}
[Data]{.highlight}

[Coordinates]{style="color:grey"}

[Mapping]{.highlight}

[Geometries]{.highlight}

[Statistics]{style="color:grey"}

[Scales]{style="color:grey"}

[Facets]{style="color:grey"}

[Theme]{style="color:grey"}
:::
:::

:::{.column width="85%"}
```{r}
#| echo: true
#| code-line-numbers: "7-11|13"
#| output-location: column-fragment
panel_E <- ggplot(
  data = sulis_bar_data,
  aes(
    x = line,
    y = lignin
  )
) +
  geom_bar(
    stat = "summary",
    fun.y = "mean"
  )

panel_E
```
:::

::::

# 2. Building a plot {auto-animate=true}

::::{.columns}

:::{.column width="15%"}
:::{style="font-size: 0.5em"}
[Data]{.highlight}

[Coordinates]{style="color:grey"}

[Mapping]{.highlight}

[Geometries]{.highlight}

[Statistics]{style="color:grey"}

[Scales]{style="color:grey"}

[Facets]{style="color:grey"}

[Theme]{style="color:grey"}
:::
:::

:::{.column width="85%"}
```{r}
#| echo: true
#| output-location: column-fragment
panel_E <- ggplot() +
  geom_bar(
    data = sulis_bar_data,
    aes(
      x = line,
      y = lignin
    ),
    stat = "summary",
    fun.y = "mean"
  )

panel_E
```

`data` and `aes()` can be specified for in `ggplot()` and [inherited]{.highlight}, or specified in each layer.
:::

::::

---

::::{.columns}

:::{.column width="50%"}
![](images/Sulis_fig3E.png)
[Figure from the paper.]{.absolute bottom=100 left=0}
:::

:::{.column width="50%"}
```{r}
panel_E <- ggplot(
  data = sulis_bar_data,
  aes(
    x = line,
    y = lignin
  )
) +
  geom_bar(
    stat = "summary",
    fun.y = "mean"
  )

panel_E
```

[Our first ggplot.]{.absolute bottom=100 left=600}
:::

::::

:::{.fragment}
[[Which differences can you spot?]{.highlight}]{.absolute bottom=0 left=0}
::: 

:::{.notes}
- reorder x-axis
- errorbars
- cut y-axis
- fill by severity
- fix axis titles
- rotate axis labels
- fix theme
:::

## Mapping — Reorder x-axis {auto-animate=true}

```{r}
#| echo: true
#| output-location: column
panel_E <- ggplot(
  data = sulis_bar_data,
  aes(
    x = line,
    y = lignin
  )
) +
  geom_bar(
    stat = "summary",
    fun.y = "mean"
  )

panel_E
```

## Mapping — Reorder x-axis {auto-animate=true}

```{r}
#| echo: true
#| code-line-numbers: "4-9"
#| output-location: column
panel_E <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      mean,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  geom_bar(
    stat = "summary",
    fun.y = "mean"
  )

panel_E
```

## Geometries — Errorbars {auto-animate=true}

```{r}
#| echo: true
#| output-location: column
panel_E <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      mean,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  geom_bar(
    stat = "summary",
    fun.y = "mean"
  )

panel_E
```

## Geometries — Errorbars {auto-animate=true}

```{r}
#| echo: true
#| code-line-numbers: "17-20"
#| output-location: column
panel_E <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      mean,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  geom_bar(
    stat = "summary",
    fun = "mean"
  ) +
  geom_errorbar(
    stat = "summary",
    fun.data = "mean_se"
  )

panel_E
```

## Geometries — Errorbars {auto-animate=true}

```{r}
#| echo: true
#| code-line-numbers: "13-21"
#| output-location: column
panel_E <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      mean,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  geom_errorbar(
    stat = "summary",
    fun.data = "mean_se",
    width = 0.2
  ) +
  geom_bar(
    stat = "summary",
    fun = "mean"
  )

panel_E
```

Layers are drawn in order, so [before = below]{.highlight}

## Or perhaps we show the data? {auto-animate=true}

```{r}
#| echo: true
#| code-line-numbers: "17"
#| output-location: column
panel_E <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      mean,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  geom_bar(
    stat = "summary",
    fun = "mean"
  ) +
  geom_jitter(width = 0.1)

panel_E
```

## Coordinates — Cut y-axis {auto-animate=true}

```{r}
#| echo: true
#| output-location: column
panel_E <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      mean,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  geom_bar(
    stat = "summary",
    fun = "mean"
  ) +
  geom_jitter(width = 0.1)

panel_E
```

## Coordinates — Cut y-axis {auto-animate=true}

```{r}
#| echo: true
#| code-line-numbers: "19-22"
#| output-location: column
library(ggtext)
panel_E <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      mean,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  geom_bar(
    stat = "summary",
    fun = "mean"
  ) +
  geom_jitter(width = 0.1) +
  coord_cartesian(
    ylim = c(10, 26),
    expand = FALSE
  )

panel_E
```

:::{.fragment}
[Let's not do that.]{.highlight}
:::

## Scales — Fill by severity {auto-animate=true}

```{r}
#| echo: true
#| output-location: column
panel_E <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      mean,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  geom_bar(
    stat = "summary",
    fun = "mean"
  ) +
  geom_jitter(width = 0.1)

panel_E
```

## Scales — Fill by severity {auto-animate=true}

```{r}
#| echo: true
#| code-line-numbers: "13-15|17,20"
#| output-location: column
panel_E <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      mean,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  scale_fill_distiller(
    palette = "Greys"
  ) + # colorbrewer2.org palettes
  geom_bar(
    aes(fill = lignin),
    stat = "summary",
    fun = "mean",
    colour = "black"
  ) +
  geom_jitter(width = 0.1)

panel_E
```

:::{.fragment}
That didn't work because the bar height is [calculated within the function]{.highlight}
:::

## Scales — Fill by severity {auto-animate=true}

```{r}
#| echo: true
#| code-line-numbers: "17"
#| output-location: column
panel_E <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      mean,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  scale_fill_distiller(
    palette = "Greys"
  ) +
  geom_bar(
    aes(fill = after_stat(y)),
    stat = "summary",
    fun = "mean",
    colour = "black"
  ) +
  geom_jitter(width = 0.1)

panel_E
```

:::{.fragment}
`after_stat(y)` tells the function to use the `y` variable *after* calculation of the stats (in this case the mean)
:::

## Theme — Fix axis titles {auto-animate=true}

```{r}
#| echo: true
#| output-location: column
panel_E <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      mean,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  scale_fill_distiller(
    palette = "Greys"
  ) +
  geom_bar(
    aes(fill = after_stat(y)),
    stat = "summary",
    fun = "mean",
    colour = "black"
  ) +
  geom_jitter(width = 0.1)

panel_E
```

## Theme — Fix axis titles {auto-animate=true}

```{r}
#| echo: true
#| code-line-numbers: "1|24-30"
#| output-location: column
library(ggtext)
panel_E <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      mean,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  scale_fill_distiller(
    palette = "Greys"
  ) +
  geom_bar(
    aes(fill = after_stat(y)),
    stat = "summary",
    fun = "mean",
    colour = "black"
  ) +
  geom_jitter(width = 0.1) +
  labs(
    x = NULL,
    y = "<b>Lignin content</b> (% wt)"
  ) +
  theme(
    axis.title.y = element_markdown()
  )

panel_E
```

`ggtext` is a `ggplot2` extension that implements HTML and markdown syntax within strings

## Theme — Rotate axis labels {auto-animate=true}

```{r}
#| echo: true
#| output-location: column
library(ggtext)
panel_E <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      mean,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  scale_fill_distiller(
    palette = "Greys"
  ) +
  geom_bar(
    aes(fill = after_stat(y)),
    stat = "summary",
    fun = "mean",
    colour = "black"
  ) +
  geom_jitter(width = 0.1) +
  labs(
    x = NULL,
    y = "<b>Lignin content</b> (% wt)"
  ) +
  theme(
    axis.title.y = element_markdown()
  )

panel_E
```

## Theme — Rotate axis labels {auto-animate=true}

```{r}
#| echo: true
#| code-line-numbers: "29-34"
#| output-location: column
panel_E <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      mean,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  scale_fill_distiller(
    palette = "Greys"
  ) +
  geom_bar(
    aes(fill = ..y..),
    stat = "summary",
    fun = "mean",
    colour = "black"
  ) +
  geom_jitter(width = 0.1) +
  labs(
    x = NULL,
    y = "<b>Lignin content</b> (% wt)"
  ) +
  theme(
    axis.title.y = element_markdown(),
    axis.text.x = element_text(
      angle = 90,
      vjust = 0.5,
      hjust = 1
    )
  )

panel_E
```

## Theme — Remove legend {auto-animate=true}

```{r}
#| echo: true
#| output-location: column
panel_E <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      mean,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  scale_fill_distiller(
    palette = "Greys"
  ) +
  geom_bar(
    aes(fill = ..y..),
    stat = "summary",
    fun = "mean",
    colour = "black"
  ) +
  geom_jitter(width = 0.1) +
  labs(
    x = NULL,
    y = "<b>Lignin content</b> (% wt)"
  ) +
  theme(
    axis.title.y = element_markdown(),
    axis.text.x = element_text(
      angle = 90,
      vjust = 0.5,
      hjust = 1
    )
  )

panel_E
```

## Theme — Remove legend {auto-animate=true}

```{r}
#| echo: true
#| code-line-numbers: "34"
#| output-location: column
panel_E <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      mean,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  scale_fill_distiller(
    palette = "Greys"
  ) +
  geom_bar(
    aes(fill = ..y..),
    stat = "summary",
    fun = "mean",
    colour = "black"
  ) +
  geom_jitter(width = 0.1) +
  labs(
    x = NULL,
    y = "<b>Lignin content</b> (% wt)"
  ) +
  theme(
    axis.title.y = element_markdown(),
    axis.text.x = element_text(
      angle = 90,
      vjust = 0.5,
      hjust = 1
    ),
    legend.position = "none"
  )

panel_E
```

## The last details {auto-animate=true}

```{r}
#| echo: true
#| output-location: column
panel_E <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      mean,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  scale_fill_distiller(
    palette = "Greys"
  ) +
  geom_bar(
    aes(fill = ..y..),
    stat = "summary",
    fun = "mean",
    colour = "black"
  ) +
  geom_jitter(width = 0.1) +
  labs(
    x = NULL,
    y = "<b>Lignin content</b> (% wt)"
  ) +
  theme(
    axis.title.y = element_markdown(),
    axis.text.x = element_text(
      angle = 90,
      vjust = 0.5,
      hjust = 1
    ),
    legend.position = "none"
  )

panel_E
```

## The last details {auto-animate=true}

```{r}
#| echo: true
#| code-line-numbers: "23-28|33-37|38"
#| output-location: column
panel_E <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      mean,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  scale_fill_distiller(
    palette = "Greys"
  ) +
  geom_bar(
    aes(fill = ..y..),
    stat = "summary",
    fun = "mean",
    colour = "black",
    width = 0.8
  ) +
  geom_jitter(
    width = 0.1,
    shape = 21,
    fill = "black",
    colour = "white"
  ) +
  labs(
    x = NULL,
    y = "<b>Lignin content</b> (% wt)"
  ) +
  scale_y_continuous(
    expand = expansion(
      mult = c(0, 0.05)
    )
  ) +
  theme_sulis() +
  theme(
    axis.title.y = element_markdown(),
    axis.text.x = element_text(
      angle = 90,
      vjust = 0.5,
      hjust = 1
    ),
    legend.position = "none"
  )

panel_E
```

:::{.fragment}
Applying a `theme_*()` can completely change the look — see how to make your own in the exercise file
:::

---

::::{.columns}

:::{.column width="50%"}
![](images/Sulis_fig3E.png)
[Figure from the paper.]{.absolute bottom=120 left=0}
:::

:::{.column width="50%"}
```{r}
panel_E <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      mean,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  scale_fill_distiller(
    palette = "Greys"
  ) +
  geom_bar(
    aes(fill = ..y..),
    stat = "summary",
    fun = "mean",
    colour = "black",
    width = 0.8
  ) +
  geom_jitter(
    width = 0.1,
    shape = 21,
    fill = "black",
    colour = "white"
  ) +
  labs(
    x = NULL,
    y = "<b>Lignin content</b> (% wt)"
  ) +
  scale_y_continuous(
    expand = expansion(
      mult = c(0, 0.05)
    )
  ) +
  theme_sulis() +
  theme(
    axis.title.y = element_markdown(),
    axis.text.x = element_text(
      angle = 90,
      vjust = 0.5,
      hjust = 1
    ),
    legend.position = "none"
  )

panel_E
```


[Our first ggplot.]{.absolute bottom=120 left=600}
[Text for ants? We'll fix that later.]{.absolute bottom=0 left=600}

:::

::::

## Next panel — same code with a few adjustments {auto-animate=true}

![](images/Sulis_fig3EF.png)

Which layers and functions need changing?

:::{.notes}
- object name
- y mapping
- y axis title
- colour scale direction
:::

## Next panel — same code with a few adjustments {auto-animate=true}

```{r}
#| echo: true
#| code-line-numbers: "1|10|15|32"
#| output-location: column-fragment
panel_F <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      mean,
      .desc = TRUE
    ),
    y = CL
  )
) +
  scale_fill_distiller(
    palette = "Greys",
    direction = 1
  ) +
  geom_bar(
    aes(fill = ..y..),
    stat = "summary",
    fun = "mean",
    colour = "black",
    width = 0.8
  ) +
  geom_jitter(
    width = 0.1,
    shape = 21,
    fill = "black",
    colour = "white"
  ) +
  labs(
    x = NULL,
    y = "<b>C/L ratio</b>"
  ) +
  scale_y_continuous(
    expand = expansion(
      mult = c(0, 0.05)
    )
  ) +
  theme_sulis() +
  theme(
    axis.title.y = element_markdown(),
    axis.text.x = element_text(
      angle = 90,
      vjust = 0.5,
      hjust = 1
    ),
    legend.position = "none"
  )

panel_F
```

# Scatter plots

![Three panels from main figure 3.](images/Sulis_fig3.png)

## Load data {auto-animate=true}

```{r}
#| echo: true
sulis_scatter_data <- read_tsv("data/Sulis2023_fig3G.tsv")
```


## The basic scatterplot {auto-animate=true}

```{r}
#| echo: true
#| code-line-numbers: ""
#| output-location: column
panel_K <- ggplot(
  data = sulis_scatter_data,
  aes(
    x = rel_lignin,
    y = rel_volume
  )
) +
  geom_point() +
  theme_sulis()

panel_K
```

## Colour the points {auto-animate=true}

```{r}
#| echo: true
#| code-line-numbers: "8-13"
#| output-location: column
panel_K <- ggplot(
  data = sulis_scatter_data,
  aes(
    x = rel_lignin,
    y = rel_volume
  )
) +
  geom_point(
    aes(colour = type)
  ) +
  scale_colour_manual(
    values = c("blue", "red")
  ) +
  theme_sulis()

panel_K
```

## Colour the points — hex codes {auto-animate=true}

```{r}
#| echo: true
#| code-line-numbers: "12"
#| output-location: column
panel_K <- ggplot(
  data = sulis_scatter_data,
  aes(
    x = rel_lignin,
    y = rel_volume
  )
) +
  geom_point(
    aes(colour = type)
  ) +
  scale_colour_manual(
    values = c("#275d95", "#d25952")
  ) +
  theme_sulis()

panel_K
```

## Colour *and fill* the points {auto-animate=true}

```{r}
#| echo: true
#| code-line-numbers: "11-13|15"
#| output-location: column-fragment
panel_K <- ggplot(
  data = sulis_scatter_data,
  aes(
    x = rel_lignin,
    y = rel_volume
  )
) +
  geom_point(
    aes(
      colour = type,
      fill = after_scale(
        colorspace::lighten(colour, 0.6)
      )
    ),
    shape = "circle filled"
  ) +
  scale_colour_manual(
    values = c("#275d95", "#d25952")
  ) +
  theme_sulis()

panel_K
```

## Reposition the legend {auto-animate=true}

```{r}
#| echo: true
#| code-line-numbers: "20-23"
#| output-location: column
panel_K <- ggplot(
  data = sulis_scatter_data,
  aes(
    x = rel_lignin,
    y = rel_volume
  )
) +
  geom_point(
    aes(
      colour = type,
      fill = after_scale(
        colorspace::lighten(colour, 0.6)
      )
    ),
    shape = "circle filled"
  ) +
  scale_colour_manual(
    values = c("#275d95", "#d25952")
  ) +
  theme_sulis() +
  theme(
    legend.position = c(0.25, 0.95),
    legend.title = element_blank()
  )

panel_K
```

## Add horizontal line {auto-animate=true}

```{r}
#| echo: true
#| code-line-numbers: "8-12"
#| output-location: column
panel_K <- ggplot(
  data = sulis_scatter_data,
  aes(
    x = rel_lignin,
    y = rel_volume
  )
) +
  geom_hline(
    yintercept = 100,
    colour = "grey",
    linetype = "dashed"
  ) +
  geom_point(
    aes(
      colour = type,
      fill = after_scale(colorspace::lighten(colour, 0.6))
    ),
    shape = "circle filled"
  ) +
  scale_colour_manual(
    values = c("#275d95", "#d25952")
  ) +
  theme_sulis() +
  theme(
    legend.position = c(0.25, 0.95),
    legend.title = element_blank()
  )

panel_K
```

## The last details {auto-animate=true}

::::{.columns}

:::{.column width="50%"}
![](images/Sulis_fig3K.png)
[Figure from the paper.]{.absolute bottom=120 left=0}
:::

:::{.column width="50%"}

```{r}
#| fig-height: 3
panel_K <- ggplot(
  data = sulis_scatter_data,
  aes(
    x = rel_lignin,
    y = rel_volume
  )
) +
  geom_hline(
    yintercept = 100,
    colour = "grey",
    linetype = "dashed"
  ) +
  geom_point(
    aes(
      colour = type,
      fill = after_scale(colorspace::lighten(colour, 0.6))
    ),
    shape = "circle filled"
  ) +
  scale_colour_manual(
    values = c("#275d95", "#d25952")
  ) +
  labs(
    x = "**Lignin content** (% of wildtype)",
    y = "<b>Stem volume</b> (% of wildtype)"
  ) +
  theme_sulis() +
  theme(
    axis.title.x = element_markdown(),
    axis.title.y = element_markdown(),
    legend.position = c(0.25, 0.95),
    legend.title = element_blank()
  )

panel_K
```

[Our *third* ggplot.]{.absolute bottom=120 left=600}

:::
::::

---

<br>
<br>

![](images/Sulis_fig3.png)

Where do the lines shown in **E** and **F** fall in **K**?

## Bonus: label interesting points

```{r}
sulis_scatter_data[c(98:110), ]
```

## Bonus: label interesting points

```{r}
#| echo: true
#| code-line-numbers: "1|21-23"
#| output-location: column-fragment
library(ggrepel)
panel_K <- ggplot(
  data = sulis_scatter_data,
  aes(
    x = rel_lignin,
    y = rel_volume
  )
) +
  geom_hline(
    yintercept = 100,
    colour = "grey",
    linetype = "dashed"
  ) +
  geom_point(
    aes(
      colour = type,
      fill = after_scale(colorspace::lighten(colour, 0.6))
    ),
    shape = "circle filled"
  ) +
  geom_label_repel(
    aes(label = label),
  ) +
  scale_colour_manual(
    values = c("#275d95", "#d25952")
  ) +
  labs(
    x = "**Lignin content** (% of wildtype)",
    y = "<b>Stem volume</b> (% of wildtype)"
  ) +
  theme_sulis() +
  theme(
    axis.title.x = element_markdown(),
    axis.title.y = element_markdown(),
    legend.position = c(0.25, 0.95),
    legend.title = element_blank()
  )

panel_K
```

[`ggrepel` creates labels that automatically avoid overlapping]{.fragment}

## Bonus: label interesting points

```{r}
#| echo: true
#| code-line-numbers: "23"
#| output-location: column-fragment
library(ggrepel)
panel_K <- ggplot(
  data = sulis_scatter_data,
  aes(
    x = rel_lignin,
    y = rel_volume
  )
) +
  geom_hline(
    yintercept = 100,
    colour = "grey",
    linetype = "dashed"
  ) +
  geom_point(
    aes(
      colour = type,
      fill = after_scale(colorspace::lighten(colour, 0.6))
    ),
    shape = "circle filled"
  ) +
  geom_label_repel(
    aes(label = label),
    size = 8
  ) +
  scale_colour_manual(
    values = c("#275d95", "#d25952")
  ) +
  labs(
    x = "**Lignin content** (% of wildtype)",
    y = "<b>Stem volume</b> (% of wildtype)"
  ) +
  theme_sulis() +
  theme(
    axis.title.x = element_markdown(),
    axis.title.y = element_markdown(),
    legend.position = c(0.25, 0.95),
    legend.title = element_blank()
  )

panel_K
```

[Geom_* size is defined in mm, theme elements in pt]{.fragment}

## Bonus: label interesting points

```{r}
#| echo: true
#| code-line-numbers: "1|24"
#| output-location: column-fragment
ggtext_size <- 8 / (14 / 5)
library(ggrepel)
panel_K <- ggplot(
  data = sulis_scatter_data,
  aes(
    x = rel_lignin,
    y = rel_volume
  )
) +
  geom_hline(
    yintercept = 100,
    colour = "grey",
    linetype = "dashed"
  ) +
  geom_point(
    aes(
      colour = type,
      fill = after_scale(colorspace::lighten(colour, 0.6))
    ),
    shape = "circle filled"
  ) +
  geom_label_repel(
    aes(label = label),
    size = ggtext_size
  ) +
  scale_colour_manual(
    values = c("#275d95", "#d25952")
  ) +
  labs(
    x = "**Lignin content** (% of wildtype)",
    y = "<b>Stem volume</b> (% of wildtype)"
  ) +
  theme_sulis() +
  theme(
    axis.title.x = element_markdown(),
    axis.title.y = element_markdown(),
    legend.position = c(0.25, 0.95),
    legend.title = element_blank()
  )

panel_K
```

14 to 5 is the ratio of pt to mm

## Bonus: label interesting points

```{r}
#| echo: true
#| code-line-numbers: "25-27"
#| output-location: column
ggtext_size <- 8 / (14 / 5)
library(ggrepel)
panel_K <- ggplot(
  data = sulis_scatter_data,
  aes(
    x = rel_lignin,
    y = rel_volume
  )
) +
  geom_hline(
    yintercept = 100,
    colour = "grey",
    linetype = "dashed"
  ) +
  geom_point(
    aes(
      colour = type,
      fill = after_scale(colorspace::lighten(colour, 0.6))
    ),
    shape = "circle filled"
  ) +
  geom_label_repel(
    aes(label = label),
    size = ggtext_size,
    label.size = NA,
    fill = rgb(1, 1, 1, 0.5),
    min.segment.length = 0
  ) +
  scale_colour_manual(
    values = c("#275d95", "#d25952")
  ) +
  labs(
    x = "**Lignin content** (% of wildtype)",
    y = "<b>Stem volume</b> (% of wildtype)"
  ) +
  theme_sulis() +
  theme(
    axis.title.x = element_markdown(),
    axis.title.y = element_markdown(),
    legend.position = c(0.25, 0.95),
    legend.title = element_blank()
  )

panel_K
```

# 3. Assembling a figure {auto-animate=true}

```{r}
#| echo: true
#| fig-height: 3
#| fig-width: 8
library(patchwork)
panel_E + panel_F + panel_K
```

[`patchwork` automatically aligns plots into multi-panel figures]{.fragment}

## Fix axis label alignment {auto-animate=true}

```{r}
#| echo: true
#| fig-height: 3
#| fig-width: 8
library(patchwork)
panel_E + panel_F + panel_K
```

## Fix axis label alignment {auto-animate=true}

```{r}
#| echo: true
#| fig-height: 3
#| fig-width: 8
library(patchwork)
panel_E + panel_F + free(panel_K, type = "label")
```

## Adjust relative widths {auto-animate=true}

```{r}
#| echo: true
#| fig-height: 3
#| fig-width: 8
library(patchwork)
panel_E + panel_F + free(panel_K, type = "label") +
  plot_layout(widths = c(1, 1, 1.75))
```

## Add panel labels {auto-animate=true}

```{r}
#| echo: true
#| fig-height: 3
#| fig-width: 8
library(patchwork)
panel_E + panel_F + free(panel_K, type = "label") +
  plot_layout(widths = c(1, 1, 1.75)) &
  plot_annotation(tag_levels = "A")
```

## Format panel labels {auto-animate=true}

```{r}
#| echo: true
#| fig-height: 3
#| fig-width: 8
library(patchwork)
panel_E + panel_F + free(panel_K, type = "label") +
  plot_layout(widths = c(1, 1, 1.75)) &
  plot_annotation(tag_levels = list(c("E", "F", "K"))) &
  theme(plot.tag = element_text(size = 10, face = "bold"))
```

---

![](images/Sulis_fig3.png)

```{r}
#| fig-height: 2.5
#| fig-width: 10
library(patchwork)
panel_E + panel_F + free(panel_K, type = "label") +
  plot_layout(widths = c(1, 1, 1.75)) &
  plot_annotation(tag_levels = list(c("E", "F", "K"))) &
  theme(plot.tag = element_text(
    size = 10, face = "bold"
  ))
```


# 4. Saving plots

## Save to pdf

```{r}
#| echo: true
ggsave(
  "images/fig3.pdf",
  width = 180,
  height = 60,
  units = "mm"
)
```

PDFs don't lose resolution and are easily edited in Inkscape/Illustrator

## Save to png

```{r}
#| echo: true
library(ragg)
ggsave(
  "images/fig3.png",
  width = 180,
  height = 60,
  units = "mm",
  device = agg_png
)
```

`ragg` and its devices (`agg_tiff`, `agg_jpeg`, `agg_png`) improve raster graphics text rendering

---

![](images/Sulis_fig3.png)

![](images/fig3.png)

# When you're stuck

:::{.incremental}
1. Know which package/function you need? — Help pages and vignettes!
2. Know what you want to do but not where to start? — Try an LLM, *e.g.* [perplexity.ai](https://perplexity.ai)
3. Looking for inspiration of what's possible? — Scroll through [#TidyTuesday](https://vis.social/tags/tidytuesday) on social media
4. *I feel like I've done this before ...* — Keep your old scripts [organised]{.highlight} and [annotated]{.highlight}, chances are you'll need that little hack you came up with again in a month or two.
:::

# Exercises!

Open up `2023_ggplot2_exercises.rmd` and give it a try

# Resources to go further

* Overview of [aesthetic mappings](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html)
* Change typefaces in [raster](https://www.tidyverse.org/blog/2021/02/modern-text-features/) and [vector](https://cran.r-project.org/web/packages/showtext/vignettes/introduction.html) graphics
* Ridgeline plots with [`ggridges`](https://wilkelab.org/ggridges/articles/introduction.html)
* Annotation shenanigans with [`ggforce`](https://rviews.rstudio.com/2019/09/19/intro-to-ggforce/)
* Animated plots with [`gganimate`](https://gganimate.com)
* "Publication ready" plots with [`ggpubr`](https://rpkgs.datanovia.com/ggpubr/)

# Resources to go further

-   R for Data Science, Hadley Wickham (2023) -- <https://r4ds.hadley.nz>
-   Fundamentals of Data Visualization, Claus O. Wilke (2019) -- <https://clauswilke.com/dataviz/>
-   [*I just need to know how to flip axis labels, quickly!* -- <https://perplexity.ai>]{.highlight}
