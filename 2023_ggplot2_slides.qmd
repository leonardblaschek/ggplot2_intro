---
title: "Getting started with `ggplot2`"
author: "Leonard Blaschek"
format:
  revealjs: 
    slide-number: true
    preview-links: auto
    logo: images/KU.png
    theme: theme/sun.scss
    css: theme/styles.css
    fig-width: 5
    fig-height: 4
---

```{r}
theme_sulis <- function(base_size = 8) {
  theme_minimal(
    base_size = base_size
  ) %+replace%
    theme(
      axis.ticks = element_blank(),
      axis.text.x = element_text(
        size = 8,
        colour = "black",
        margin = margin(1, 1, 1, 1)
      ),
      axis.text.y = element_text(
        colour = "black",
        size = 8,
        angle = 0,
        vjust = 0.5,
        hjust = 1,
        margin = margin(1, 1, 1, 1)
      ),
      axis.title = element_text(
        colour = "black",
        size = 8
      ),
      axis.line = element_line(),
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      legend.text = element_text(size = 8),
      legend.key.height = unit(4, "mm"),
      complete = TRUE
    )
}
```


# A quick word about myself

## Traditional plotting interfaces

![](images/trad_1.png){.absolute top=150 left=0 height="500"}

## Traditional plotting interfaces

![](images/trad_2.png){.absolute top=150 left=0 height="500"}

# The 'Grammar of Graphics'

::: fragment
A universal framework that allows creating and combining without limits.
:::

::: fragment
[Almost.]{.highlight}
:::

## The 'Grammar of Graphics' {auto-animate=true}

![](images/theme.png){.absolute top=250 left=2 height="200"}
![](images/scales.png){.absolute top=250 left=0 height="200"}
![](images/coords.png){.absolute top=250 left=0 height="200"}
![](images/geom.png){.absolute top=250 left=0 height="200"}


## The 'Grammar of Graphics' {auto-animate=true}

![](images/theme.png){.absolute top=550 left=2 height="150"}
![](images/scales.png){.absolute top=400 left=0 height="150"}
![](images/coords.png){.absolute top=100 left=0 height="150"}
![](images/geom.png){.absolute top=250 left=0 height="150"}

[Coordinates]{.absolute top=200 left=200}
[Geometries]{.absolute top=350 left=200}
[Scales]{.absolute top=500 left=200}
[Theme]{.absolute top=650 left=200}

::: {.fragment style="color: grey"}
[Data]{.absolute top=125 left=200}
[Mapping]{.absolute top=275 left=200}
[Statistics]{.absolute top=425 left=200}
[Facets]{.absolute top=575 left=200}
:::

::: fragment
![](images/flow.png){.absolute top=200 left=600 height="400"}
:::



## Scope of this workshop 

<br>

1.   Load your data into R
2.   Make a handful of publishable plots
3.   Combine them into a multi-panel figure
4.   Save a .pdf in the right size (one/two column)

## What we're not doing today

<br>

-  Data wrangling (`dplyr`/`tidyr`)
-  Statistical tests 
-  90% of `ggplot2` 


::: fragment
*Some common struggles of scientific plotting are solved in the accompanying script file.*
:::

---

**Multiplex CRISPR editing of wood for sustainable fiber production.**
Sulis DB, [...], Barrangou R, Wang JP. 2023. *Science* 381:216–221. [10.1126/science.add4514](https://doi.org/10.1126/science.add4514)

<br>

![Three panels from main figure 3.](images/Sulis_fig3.png)

# R(studio) crash course

```{.r}
ggplot()            # function
ggplot              # object
996107              # number
"ggplot"            # string
?ggplot()           # show help page 
library(tidyverse)  # use library() to load the tidyverse package
```


# 1. Data import {auto-animate=true}

```{.r}
library(tidyverse)
```

# 1. Data import {auto-animate=true}

```{.r}
library(tidyverse)
sulis_bar_data
```

# 1. Data import {auto-animate=true}

```{.r}
library(tidyverse)
sulis_bar_data <- read_tsv()
```

# 1. Data import {auto-animate=true}

```{r}
#| echo: true
library(tidyverse)
sulis_bar_data <- read_tsv("data/Sulis2023_fig3EF.tsv")
```

:::{.fragment}
Assign the function output of `read_tsv("data/Sulis2023_fig3EF.tsv")` <br>to the object <br>`sulis_bar_data`.
:::

# 1. Data import {auto-animate=true}

```{r}
#| echo: true
library(tidyverse)
sulis_bar_data <- read_tsv("data/Sulis2023_fig3EF.tsv")
sulis_bar_data
```


# 2. Building a plot {auto-animate=true}

::::{.columns}

::: {.column width="15%"}
::: {style="font-size: 0.5em"}
[Data]{style="color:grey"}

[Coordinates]{style="color:grey"}

[Mapping]{style="color:grey"}

[Geometries]{style="color:grey"}

[Statistics]{style="color:grey"}

[Scales]{style="color:grey"}

[Facets]{style="color:grey"}

[Theme]{style="color:grey"}
:::
:::

::: {.column width="45%"}
```{.r}
bar_plot <- ggplot()
```
:::

::: {.colum width="40%"}
:::
::::

# 2. Building a plot {auto-animate=true}

::::{.columns}

::: {.column width="15%"}
::: {style="font-size: 0.5em"}
[Data]{.highlight}

[Coordinates]{style="color:grey"}

[Mapping]{style="color:grey"}

[Geometries]{style="color:grey"}

[Statistics]{style="color:grey"}

[Scales]{style="color:grey"}

[Facets]{style="color:grey"}

[Theme]{style="color:grey"}
:::
:::

::: {.column width="42.5%"}
```{.r code-line-numbers="2"}
lines_bar <- ggplot(
  data = sulis_bar_data
)
```
:::

::: {.colum width="42.5%"}
:::
::::

# 2. Building a plot {auto-animate=true}

::::{.columns}

::: {.column width="15%"}
::: {style="font-size: 0.5em"}
[Data]{.highlight}

[Coordinates]{style="color:grey"}

[Mapping]{.highlight}

[Geometries]{style="color:grey"}

[Statistics]{style="color:grey"}

[Scales]{style="color:grey"}

[Facets]{style="color:grey"}

[Theme]{style="color:grey"}
:::
:::

::: {.column width="42.5%"}
```{.r code-line-numbers="3-6"}
lines_bar <- ggplot(
  data = sulis_bar_data,
  aes(
    x = line,
    y = lignin
  )
)
```
:::

::: {.colum width="42.5%"}
:::
::::

# 2. Building a plot {auto-animate=true}

::::{.columns}

::: {.column width="15%"}
::: {style="font-size: 0.5em"}
[Data]{.highlight}

[Coordinates]{style="color:grey"}

[Mapping]{.highlight}

[Geometries]{.highlight}

[Statistics]{style="color:grey"}

[Scales]{style="color:grey"}

[Facets]{style="color:grey"}

[Theme]{style="color:grey"}
:::
:::

::: {.column width="85%"}
```{r}
#| echo: true
#| code-line-numbers: "7-11|13"
#| output-location: column-fragment
lines_bar <- ggplot(
  data = sulis_bar_data,
  aes(
    x = line,
    y = lignin
  )
) +
  geom_bar(
    stat = "summary",
    fun.y = "mean"
  )

lines_bar
```
:::

::::

---

::::{.columns}

::: {.column width="50%"}
![](images/Sulis_fig3E.png)
[Figure from the paper.]{.absolute bottom=100 left=0}
:::

::: {.column width="50%"}
```{r}
lines_bar <- ggplot(
  data = sulis_bar_data,
  aes(
    x = line,
    y = lignin
  )
) +
  geom_bar(
    stat = "summary",
    fun.y = "mean"
  )

lines_bar
```

[Our first ggplot.]{.absolute bottom=100 left=600}
:::

::::

## Reorder x-axis {auto-animate=true}

```{r}
#| echo: true
#| code-line-numbers: "4-8"
#| output-location: column-fragment
lines_bar <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  geom_bar(
    stat = "summary",
    fun.y = "mean"
  )

lines_bar
```

## Adding standard error {auto-animate=true}


```{r}
#| echo: true
#| code-line-numbers: "16-19"
#| output-location: column-fragment
lines_bar <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  geom_bar(
    stat = "summary",
    fun = "mean"
  ) +
  geom_errorbar(
    stat = "summary",
    fun.data = "mean_se"
  )

lines_bar
```

## Adding standard error {auto-animate=true}

```{r}
#| echo: true
#| code-line-numbers: "12-16"
#| output-location: column-fragment
lines_bar <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  geom_errorbar(
    stat = "summary",
    fun.data = "mean_se",
    width = 0.2
  ) +
  geom_bar(
    stat = "summary",
    fun = "mean"
  )

lines_bar
```

Layers are drawn in order, so [before = below]{.highlight}

## Or perhaps we show the data? {auto-animate=true}

```{r}
#| echo: true
#| code-line-numbers: "16"
#| output-location: column-fragment
lines_bar <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  geom_bar(
    stat = "summary",
    fun = "mean"
  ) +
  geom_jitter(width = 0.1)

lines_bar
```

## Coordinates — Cut y-axis {auto-animate=true}

```{r}
#| echo: true
#| code-line-numbers: "18-21"
#| output-location: column-fragment
library(ggtext)
lines_bar <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  geom_bar(
    stat = "summary",
    fun = "mean"
  ) +
  geom_jitter(width = 0.1) +
  coord_cartesian(
    ylim = c(10, 26),
    expand = FALSE
  )

lines_bar
```

::: {.fragment}
[Let's not do that.]{.highlight}
:::

## Scales — Fill by severity {auto-animate=true}

```{r}
#| echo: true
#| code-line-numbers: "12-14|16|19"
#| output-location: column-fragment
lines_bar <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  scale_fill_distiller(
    palette = "Greys"
  ) +
  geom_bar(
    aes(fill = lignin),
    stat = "summary",
    fun = "mean",
    colour = "black"
  ) +
  geom_jitter(width = 0.1)

lines_bar
```

:::{.fragment}
That didn't work because the bar height is [calculated within the function]{.highlight}
:::

## Scales — Fill by severity {auto-animate=true}

```{r}
#| echo: true
#| code-line-numbers: "12-14|16|19"
#| output-location: column-fragment
lines_bar <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  scale_fill_distiller(
    palette = "Greys"
  ) +
  geom_bar(
    aes(fill = after_stat(y)),
    stat = "summary",
    fun = "mean",
    colour = "black"
  ) +
  geom_jitter(width = 0.1)

lines_bar
```

:::{.fragment}
`after_stat(y)` represents the out
:::

## Theme — Fix axis titles {auto-animate=true}

```{r}
#| echo: true
#| code-line-numbers: "1|23-29"
#| output-location: column-fragment
library(ggtext)
lines_bar <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  scale_fill_distiller(
    palette = "Greys"
  ) +
  geom_bar(
    aes(fill = ..y..),
    stat = "summary",
    fun = "mean",
    colour = "black"
  ) +
  geom_jitter(width = 0.1) +
  labs(
    x = NULL,
    y = "<b>Lignin content</b> (% wt)"
  ) +
  theme(
    axis.title.y = element_markdown()
  )

lines_bar
```

## Theme — Rotate axis labels {auto-animate=true}

```{r}
#| echo: true
#| code-line-numbers: "28-32"
#| output-location: column-fragment
lines_bar <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  scale_fill_distiller(
    palette = "Greys"
  ) +
  geom_bar(
    aes(fill = ..y..),
    stat = "summary",
    fun = "mean",
    colour = "black"
  ) +
  geom_jitter(width = 0.1) +
  labs(
    x = NULL,
    y = "<b>Lignin content</b> (% wt)"
  ) +
  theme(
    axis.title.y = element_markdown(),
    axis.text.x = element_text(
      angle = 90,
      vjust = 0.5,
      hjust = 1
    )
  )

lines_bar
```

## Theme — Remove legend {auto-animate=true}

```{r}
#| echo: true
#| code-line-numbers: "33"
#| output-location: column-fragment
lines_bar <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  scale_fill_distiller(
    palette = "Greys"
  ) +
  geom_bar(
    aes(fill = ..y..),
    stat = "summary",
    fun = "mean",
    colour = "black"
  ) +
  geom_jitter(width = 0.1) +
  labs(
    x = NULL,
    y = "<b>Lignin content</b> (% wt)"
  ) +
  theme(
    axis.title.y = element_markdown(),
    axis.text.x = element_text(
      angle = 90,
      vjust = 0.5,
      hjust = 1
    ),
    legend.position = "none"
  )

lines_bar
```

## Theme — The last details {auto-animate=true}

```{r}
#| echo: true
#| code-line-numbers: "22-27|32-36|37"
#| output-location: column-fragment
lines_bar <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  scale_fill_distiller(
    palette = "Greys"
  ) +
  geom_bar(
    aes(fill = ..y..),
    stat = "summary",
    fun = "mean",
    colour = "black",
    width = 0.8
  ) +
  geom_jitter(
    width = 0.1,
    shape = 21,
    fill = "black",
    colour = "white"
  ) +
  labs(
    x = NULL,
    y = "<b>Lignin content</b> (% wt)"
  ) +
  scale_y_continuous(
    expand = expansion(
      mult = c(0, 0.05)
    )
  ) +
  theme_sulis() +
  theme(
    axis.title.y = element_markdown(),
    axis.text.x = element_text(
      angle = 90,
      vjust = 0.5,
      hjust = 1
    ),
    legend.position = "none"
  )

lines_bar
```

---

::::{.columns}

::: {.column width="50%"}
![](images/Sulis_fig3E.png)
[Figure from the paper.]{.absolute bottom=120 left=0}
:::

::: {.column width="50%"}
```{r}
lines_bar <- ggplot(
  data = sulis_bar_data,
  aes(
    x = fct_reorder(
      line,
      lignin,
      .desc = TRUE
    ),
    y = lignin
  )
) +
  scale_fill_distiller(
    palette = "Greys"
  ) +
  geom_bar(
    aes(fill = ..y..),
    stat = "summary",
    fun = "mean",
    colour = "black",
    width = 0.8
  ) +
  geom_jitter(
    width = 0.1,
    shape = 21,
    fill = "black",
    colour = "white"
  ) +
  labs(
    x = NULL,
    y = "<b>Lignin content</b> (% wt)"
  ) +
  scale_y_continuous(
    expand = expansion(
      mult = c(0, 0.05)
    )
  ) +
  theme_sulis() +
  theme(
    axis.title.y = element_markdown(),
    axis.text.x = element_text(
      angle = 90,
      vjust = 0.5,
      hjust = 1
    ),
    legend.position = "none"
  )

lines_bar
```


[Our first ggplot.]{.absolute bottom=120 left=600}
[Text for ants? We'll fix that later.]{.absolute bottom=0 left=600}

:::

::::

## Geoms

-   geom_point()
-   geom_jitter()
-   geom_line()
-   [geom_errorbar()]{.reveal .highlight}
-   geom_smooth()
-   geom_boxplot()

## Scales

-   scale\_\*\_\*(values, name, guide)

## Coords

-   coord_cartesian(xlim, ylim, expand)
-   coord_trans(x, y)
-   coord_fixed()

## Facets

-   facet_wrap()
-   facet_grid()

## Themes

-   minimal
-   hrbrmstr

# 3. Assembling plots

-   patchwork

# 4. Saving plots

-   pdf()

# Resources to go further

-   R for Data Science, Hadley Wickham (2023) -- <https://r4ds.hadley.nz>
-   Fundamentals of Data Visualization, Claus O. Wilke (2019) -- <https://clauswilke.com/dataviz/>
-   *I just need to know how to flip axis labels, quickly!* -- <https://perplexity.ai>

# Course Supplement

-   importing folders of textfiles with map_dfr()
-   mutate()
-   summarise()
-   geom_bar()
-   geom_violin()
-   position_dodge()
-   coord_polar(theta)
-   facets with facet labels as axis titles

# More useful extensions:

-   ggtext
-   ggridges
-   ggrepel
-   ggtext
-   ggforce
-   gganimate
-   ggraph
-   ggpubr(/tukeygrps?)
-   showtext/systemfonts
